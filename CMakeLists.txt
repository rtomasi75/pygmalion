cmake_minimum_required (VERSION 3.16)

project (pygmalion-core)

set (pygmalion_VERSION_MAJOR 1)
set (pygmalion_VERSION_MINOR 0)

ENABLE_TESTING()

include(CheckCXXCompilerFlag)

    option(OPTIMIZE_FOR_BMI2 "Build for BMI2" ON)
    option(OPTIMIZE_FOR_AVX512 "Build for AVX512" OFF)
    option(OPTIMIZE_FOR_AVX2 "Build for AVX2" OFF)
    option(OPTIMIZE_FOR_AVX "Build for AVX" OFF)

if(MSVC)

    if(OPTIMIZE_FOR_BMI2)
    add_definitions(-DPYGMALION_CPU_BMI2)
    endif()

    if(OPTIMIZE_FOR_AVX512)
        CHECK_CXX_COMPILER_FLAG("/arch:AVX512" COMPILER_SUPPORTS_ARCH_AVX512)
        if(COMPILER_SUPPORTS_ARCH_AVX512 )
            message("-- building with /arch:AVX512")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX512")
            add_definitions(-DPYGMALION_CPU_AVX512)
            add_definitions(-DPYGMALION_CPU_AVX2)
            add_definitions(-DPYGMALION_CPU_AVX)
        else()
            message("-- NOT building with /arch:AVX512")
        endif()
    else()
        if(OPTIMIZE_FOR_AVX2)
            CHECK_CXX_COMPILER_FLAG("/arch:AVX2" COMPILER_SUPPORTS_ARCH_AVX2)
            if(COMPILER_SUPPORTS_ARCH_AVX2 )
                message("-- building with /arch:AVX2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX2")
                add_definitions(-DPYGMALION_CPU_AVX2)
                add_definitions(-DPYGMALION_CPU_AVX)
            else()
                message("-- NOT building with /arch:AVX2")
            endif()
        else()
            if(OPTIMIZE_FOR_AVX)
                CHECK_CXX_COMPILER_FLAG("/arch:AVX" COMPILER_SUPPORTS_ARCH_AVX)
                if(COMPILER_SUPPORTS_ARCH_AVX )
                    message("-- building with /arch:AVX")
                    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX")
                    add_definitions(-DPYGMALION_CPU_AVX)
                else()
                    message("-- NOT building with /arch:AVX")
                endif()
            endif()
        endif()
    endif()
endif()
if(OPTIMIZE_FOR_BMI2)
    message("-- trying to build with -mbmi2")
    CHECK_CXX_COMPILER_FLAG("-mbmi2" COMPILER_SUPPORTS_MBMI2)
    if(COMPILER_SUPPORTS_MBMI2)
        message("-- building with -mbmi2")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mbmi2")
    else()
        message("-- NOT building with -mbmi2")
    endif()
endif()
if(OPTIMIZE_FOR_AVX512)
    message("-- trying to build with -mavx512")
    CHECK_CXX_COMPILER_FLAG("-mavx512" COMPILER_SUPPORTS_MAVX512)
    if(COMPILER_SUPPORTS_MAVX512)
        message("-- building with -mavx512")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512")
    else()
        message("-- NOT building with -mavx512")
        message("-- trying to build with -mavx2")
        CHECK_CXX_COMPILER_FLAG("-mavx2" COMPILER_SUPPORTS_MAVX2)
        if(COMPILER_SUPPORTS_MAVX2)
            message("-- building with -mavx2")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
        else()
            message("-- NOT building with -mavx2")
            message("-- trying to build with -mavx")
            CHECK_CXX_COMPILER_FLAG("-mavx" COMPILER_SUPPORTS_MAVX)
            if(COMPILER_SUPPORTS_MAVX)
                message("-- building with -mavx")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx")
            else()
                message("-- NOT building with -mavx")
            endif()
        endif()
    endif()
else()
    if(OPTIMIZE_FOR_AVX2)
        message("-- trying to build with -mavx2")
        CHECK_CXX_COMPILER_FLAG("-mavx2" COMPILER_SUPPORTS_MAVX2)
        if(COMPILER_SUPPORTS_MAVX2)
            message("-- building with -mavx2")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
        else()
            message("-- NOT building with -mavx2")
            message("-- trying to build with -mavx")
            CHECK_CXX_COMPILER_FLAG("-mavx" COMPILER_SUPPORTS_MAVX)
            if(COMPILER_SUPPORTS_MAVX)
                message("-- building with -mavx")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx")
            else()
                message("-- NOT building with -mavx")
            endif()
        endif()
    else()
        if(OPTIMIZE_FOR_AVX)
            message("-- trying to build with -mavx")
            CHECK_CXX_COMPILER_FLAG("-mavx" COMPILER_SUPPORTS_MAVX)
            if(COMPILER_SUPPORTS_MAVX)
                message("-- building with -mavx")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx")
            else()
                message("-- NOT building with -mavx")
            endif()
        endif()
    endif()
endif()

option(OPTIMIZE_FOR_NATIVE "Build with -march=native" OFF)

if(OPTIMIZE_FOR_NATIVE)
    message("-- trying to build with -march=native")
    CHECK_CXX_COMPILER_FLAG("-march=native" COMPILER_SUPPORTS_MARCH_NATIVE)
    if(COMPILER_SUPPORTS_MARCH_NATIVE)
        message("-- building with -march=native")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
    else()
        message("-- NOT building with -march=native")
    endif()
    message("-- trying to build with -flto")
    CHECK_CXX_COMPILER_FLAG("-flto" COMPILER_SUPPORTS_FLTO)
    if(COMPILER_SUPPORTS_FLTO)
        message("-- building with -flto")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto")
    else()
        message("-- NOT building with -flto")
    endif()
endif()

add_subdirectory(pygmalion-intrinsics)
add_subdirectory(pygmalion-state)
add_subdirectory(pygmalion-mechanics)

add_subdirectory(pygmalion-tictactoe-state)
add_subdirectory(pygmalion-tictactoe-mechanics)

add_subdirectory(pygmalion-chess-state)

#add_subdirectory(pygmalion-bits)
#add_subdirectory(pygmalion-core)
#add_subdirectory(pygmalion-tictactoe)
#add_subdirectory(pygmalion-chess)
