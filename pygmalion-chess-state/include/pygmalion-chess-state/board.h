namespace pygmalion::chess
{

	class board :
		public pygmalion::board<state::descriptor_state, board>
	{
	private:
		constexpr static inline state::materialTables<state::descriptor_state> m_Material{ state::materialTables<state::descriptor_state>() };
		constexpr static inline hashType m_PieceHash[768]
		{
			hashType(UINT64_C(0x9D39247E33776D41)), hashType(UINT64_C(0x2AF7398005AAA5C7)), hashType(UINT64_C(0x44DB015024623547)), hashType(UINT64_C(0x9C15F73E62A76AE2)),
			hashType(UINT64_C(0x75834465489C0C89)), hashType(UINT64_C(0x3290AC3A203001BF)), hashType(UINT64_C(0x0FBBAD1F61042279)), hashType(UINT64_C(0xE83A908FF2FB60CA)),
			hashType(UINT64_C(0x0D7E765D58755C10)), hashType(UINT64_C(0x1A083822CEAFE02D)), hashType(UINT64_C(0x9605D5F0E25EC3B0)), hashType(UINT64_C(0xD021FF5CD13A2ED5)),
			hashType(UINT64_C(0x40BDF15D4A672E32)), hashType(UINT64_C(0x011355146FD56395)), hashType(UINT64_C(0x5DB4832046F3D9E5)), hashType(UINT64_C(0x239F8B2D7FF719CC)),
			hashType(UINT64_C(0x05D1A1AE85B49AA1)), hashType(UINT64_C(0x679F848F6E8FC971)), hashType(UINT64_C(0x7449BBFF801FED0B)), hashType(UINT64_C(0x7D11CDB1C3B7ADF0)),
			hashType(UINT64_C(0x82C7709E781EB7CC)), hashType(UINT64_C(0xF3218F1C9510786C)), hashType(UINT64_C(0x331478F3AF51BBE6)), hashType(UINT64_C(0x4BB38DE5E7219443)),
			hashType(UINT64_C(0xAA649C6EBCFD50FC)), hashType(UINT64_C(0x8DBD98A352AFD40B)), hashType(UINT64_C(0x87D2074B81D79217)), hashType(UINT64_C(0x19F3C751D3E92AE1)),
			hashType(UINT64_C(0xB4AB30F062B19ABF)), hashType(UINT64_C(0x7B0500AC42047AC4)), hashType(UINT64_C(0xC9452CA81A09D85D)), hashType(UINT64_C(0x24AA6C514DA27500)),
			hashType(UINT64_C(0x4C9F34427501B447)), hashType(UINT64_C(0x14A68FD73C910841)), hashType(UINT64_C(0xA71B9B83461CBD93)), hashType(UINT64_C(0x03488B95B0F1850F)),
			hashType(UINT64_C(0x637B2B34FF93C040)), hashType(UINT64_C(0x09D1BC9A3DD90A94)), hashType(UINT64_C(0x3575668334A1DD3B)), hashType(UINT64_C(0x735E2B97A4C45A23)),
			hashType(UINT64_C(0x18727070F1BD400B)), hashType(UINT64_C(0x1FCBACD259BF02E7)), hashType(UINT64_C(0xD310A7C2CE9B6555)), hashType(UINT64_C(0xBF983FE0FE5D8244)),
			hashType(UINT64_C(0x9F74D14F7454A824)), hashType(UINT64_C(0x51EBDC4AB9BA3035)), hashType(UINT64_C(0x5C82C505DB9AB0FA)), hashType(UINT64_C(0xFCF7FE8A3430B241)),
			hashType(UINT64_C(0x3253A729B9BA3DDE)), hashType(UINT64_C(0x8C74C368081B3075)), hashType(UINT64_C(0xB9BC6C87167C33E7)), hashType(UINT64_C(0x7EF48F2B83024E20)),
			hashType(UINT64_C(0x11D505D4C351BD7F)), hashType(UINT64_C(0x6568FCA92C76A243)), hashType(UINT64_C(0x4DE0B0F40F32A7B8)), hashType(UINT64_C(0x96D693460CC37E5D)),
			hashType(UINT64_C(0x42E240CB63689F2F)), hashType(UINT64_C(0x6D2BDCDAE2919661)), hashType(UINT64_C(0x42880B0236E4D951)), hashType(UINT64_C(0x5F0F4A5898171BB6)),
			hashType(UINT64_C(0x39F890F579F92F88)), hashType(UINT64_C(0x93C5B5F47356388B)), hashType(UINT64_C(0x63DC359D8D231B78)), hashType(UINT64_C(0xEC16CA8AEA98AD76)),
			hashType(UINT64_C(0x5355F900C2A82DC7)), hashType(UINT64_C(0x07FB9F855A997142)), hashType(UINT64_C(0x5093417AA8A7ED5E)), hashType(UINT64_C(0x7BCBC38DA25A7F3C)),
			hashType(UINT64_C(0x19FC8A768CF4B6D4)), hashType(UINT64_C(0x637A7780DECFC0D9)), hashType(UINT64_C(0x8249A47AEE0E41F7)), hashType(UINT64_C(0x79AD695501E7D1E8)),
			hashType(UINT64_C(0x14ACBAF4777D5776)), hashType(UINT64_C(0xF145B6BECCDEA195)), hashType(UINT64_C(0xDABF2AC8201752FC)), hashType(UINT64_C(0x24C3C94DF9C8D3F6)),
			hashType(UINT64_C(0xBB6E2924F03912EA)), hashType(UINT64_C(0x0CE26C0B95C980D9)), hashType(UINT64_C(0xA49CD132BFBF7CC4)), hashType(UINT64_C(0xE99D662AF4243939)),
			hashType(UINT64_C(0x27E6AD7891165C3F)), hashType(UINT64_C(0x8535F040B9744FF1)), hashType(UINT64_C(0x54B3F4FA5F40D873)), hashType(UINT64_C(0x72B12C32127FED2B)),
			hashType(UINT64_C(0xEE954D3C7B411F47)), hashType(UINT64_C(0x9A85AC909A24EAA1)), hashType(UINT64_C(0x70AC4CD9F04F21F5)), hashType(UINT64_C(0xF9B89D3E99A075C2)),
			hashType(UINT64_C(0x87B3E2B2B5C907B1)), hashType(UINT64_C(0xA366E5B8C54F48B8)), hashType(UINT64_C(0xAE4A9346CC3F7CF2)), hashType(UINT64_C(0x1920C04D47267BBD)),
			hashType(UINT64_C(0x87BF02C6B49E2AE9)), hashType(UINT64_C(0x092237AC237F3859)), hashType(UINT64_C(0xFF07F64EF8ED14D0)), hashType(UINT64_C(0x8DE8DCA9F03CC54E)),
			hashType(UINT64_C(0x9C1633264DB49C89)), hashType(UINT64_C(0xB3F22C3D0B0B38ED)), hashType(UINT64_C(0x390E5FB44D01144B)), hashType(UINT64_C(0x5BFEA5B4712768E9)),
			hashType(UINT64_C(0x1E1032911FA78984)), hashType(UINT64_C(0x9A74ACB964E78CB3)), hashType(UINT64_C(0x4F80F7A035DAFB04)), hashType(UINT64_C(0x6304D09A0B3738C4)),
			hashType(UINT64_C(0x2171E64683023A08)), hashType(UINT64_C(0x5B9B63EB9CEFF80C)), hashType(UINT64_C(0x506AACF489889342)), hashType(UINT64_C(0x1881AFC9A3A701D6)),
			hashType(UINT64_C(0x6503080440750644)), hashType(UINT64_C(0xDFD395339CDBF4A7)), hashType(UINT64_C(0xEF927DBCF00C20F2)), hashType(UINT64_C(0x7B32F7D1E03680EC)),
			hashType(UINT64_C(0xB9FD7620E7316243)), hashType(UINT64_C(0x05A7E8A57DB91B77)), hashType(UINT64_C(0xB5889C6E15630A75)), hashType(UINT64_C(0x4A750A09CE9573F7)),
			hashType(UINT64_C(0xCF464CEC899A2F8A)), hashType(UINT64_C(0xF538639CE705B824)), hashType(UINT64_C(0x3C79A0FF5580EF7F)), hashType(UINT64_C(0xEDE6C87F8477609D)),
			hashType(UINT64_C(0x799E81F05BC93F31)), hashType(UINT64_C(0x86536B8CF3428A8C)), hashType(UINT64_C(0x97D7374C60087B73)), hashType(UINT64_C(0xA246637CFF328532)),
			hashType(UINT64_C(0x043FCAE60CC0EBA0)), hashType(UINT64_C(0x920E449535DD359E)), hashType(UINT64_C(0x70EB093B15B290CC)), hashType(UINT64_C(0x73A1921916591CBD)),
			hashType(UINT64_C(0x56436C9FE1A1AA8D)), hashType(UINT64_C(0xEFAC4B70633B8F81)), hashType(UINT64_C(0xBB215798D45DF7AF)), hashType(UINT64_C(0x45F20042F24F1768)),
			hashType(UINT64_C(0x930F80F4E8EB7462)), hashType(UINT64_C(0xFF6712FFCFD75EA1)), hashType(UINT64_C(0xAE623FD67468AA70)), hashType(UINT64_C(0xDD2C5BC84BC8D8FC)),
			hashType(UINT64_C(0x7EED120D54CF2DD9)), hashType(UINT64_C(0x22FE545401165F1C)), hashType(UINT64_C(0xC91800E98FB99929)), hashType(UINT64_C(0x808BD68E6AC10365)),
			hashType(UINT64_C(0xDEC468145B7605F6)), hashType(UINT64_C(0x1BEDE3A3AEF53302)), hashType(UINT64_C(0x43539603D6C55602)), hashType(UINT64_C(0xAA969B5C691CCB7A)),
			hashType(UINT64_C(0xA87832D392EFEE56)), hashType(UINT64_C(0x65942C7B3C7E11AE)), hashType(UINT64_C(0xDED2D633CAD004F6)), hashType(UINT64_C(0x21F08570F420E565)),
			hashType(UINT64_C(0xB415938D7DA94E3C)), hashType(UINT64_C(0x91B859E59ECB6350)), hashType(UINT64_C(0x10CFF333E0ED804A)), hashType(UINT64_C(0x28AED140BE0BB7DD)),
			hashType(UINT64_C(0xC5CC1D89724FA456)), hashType(UINT64_C(0x5648F680F11A2741)), hashType(UINT64_C(0x2D255069F0B7DAB3)), hashType(UINT64_C(0x9BC5A38EF729ABD4)),
			hashType(UINT64_C(0xEF2F054308F6A2BC)), hashType(UINT64_C(0xAF2042F5CC5C2858)), hashType(UINT64_C(0x480412BAB7F5BE2A)), hashType(UINT64_C(0xAEF3AF4A563DFE43)),
			hashType(UINT64_C(0x19AFE59AE451497F)), hashType(UINT64_C(0x52593803DFF1E840)), hashType(UINT64_C(0xF4F076E65F2CE6F0)), hashType(UINT64_C(0x11379625747D5AF3)),
			hashType(UINT64_C(0xBCE5D2248682C115)), hashType(UINT64_C(0x9DA4243DE836994F)), hashType(UINT64_C(0x066F70B33FE09017)), hashType(UINT64_C(0x4DC4DE189B671A1C)),
			hashType(UINT64_C(0x51039AB7712457C3)), hashType(UINT64_C(0xC07A3F80C31FB4B4)), hashType(UINT64_C(0xB46EE9C5E64A6E7C)), hashType(UINT64_C(0xB3819A42ABE61C87)),
			hashType(UINT64_C(0x21A007933A522A20)), hashType(UINT64_C(0x2DF16F761598AA4F)), hashType(UINT64_C(0x763C4A1371B368FD)), hashType(UINT64_C(0xF793C46702E086A0)),
			hashType(UINT64_C(0xD7288E012AEB8D31)), hashType(UINT64_C(0xDE336A2A4BC1C44B)), hashType(UINT64_C(0x0BF692B38D079F23)), hashType(UINT64_C(0x2C604A7A177326B3)),
			hashType(UINT64_C(0x4850E73E03EB6064)), hashType(UINT64_C(0xCFC447F1E53C8E1B)), hashType(UINT64_C(0xB05CA3F564268D99)), hashType(UINT64_C(0x9AE182C8BC9474E8)),
			hashType(UINT64_C(0xA4FC4BD4FC5558CA)), hashType(UINT64_C(0xE755178D58FC4E76)), hashType(UINT64_C(0x69B97DB1A4C03DFE)), hashType(UINT64_C(0xF9B5B7C4ACC67C96)),
			hashType(UINT64_C(0xFC6A82D64B8655FB)), hashType(UINT64_C(0x9C684CB6C4D24417)), hashType(UINT64_C(0x8EC97D2917456ED0)), hashType(UINT64_C(0x6703DF9D2924E97E)),
			hashType(UINT64_C(0xC547F57E42A7444E)), hashType(UINT64_C(0x78E37644E7CAD29E)), hashType(UINT64_C(0xFE9A44E9362F05FA)), hashType(UINT64_C(0x08BD35CC38336615)),
			hashType(UINT64_C(0x9315E5EB3A129ACE)), hashType(UINT64_C(0x94061B871E04DF75)), hashType(UINT64_C(0xDF1D9F9D784BA010)), hashType(UINT64_C(0x3BBA57B68871B59D)),
			hashType(UINT64_C(0xD2B7ADEEDED1F73F)), hashType(UINT64_C(0xF7A255D83BC373F8)), hashType(UINT64_C(0xD7F4F2448C0CEB81)), hashType(UINT64_C(0xD95BE88CD210FFA7)),
			hashType(UINT64_C(0x336F52F8FF4728E7)), hashType(UINT64_C(0xA74049DAC312AC71)), hashType(UINT64_C(0xA2F61BB6E437FDB5)), hashType(UINT64_C(0x4F2A5CB07F6A35B3)),
			hashType(UINT64_C(0x87D380BDA5BF7859)), hashType(UINT64_C(0x16B9F7E06C453A21)), hashType(UINT64_C(0x7BA2484C8A0FD54E)), hashType(UINT64_C(0xF3A678CAD9A2E38C)),
			hashType(UINT64_C(0x39B0BF7DDE437BA2)), hashType(UINT64_C(0xFCAF55C1BF8A4424)), hashType(UINT64_C(0x18FCF680573FA594)), hashType(UINT64_C(0x4C0563B89F495AC3)),
			hashType(UINT64_C(0x40E087931A00930D)), hashType(UINT64_C(0x8CFFA9412EB642C1)), hashType(UINT64_C(0x68CA39053261169F)), hashType(UINT64_C(0x7A1EE967D27579E2)),
			hashType(UINT64_C(0x9D1D60E5076F5B6F)), hashType(UINT64_C(0x3810E399B6F65BA2)), hashType(UINT64_C(0x32095B6D4AB5F9B1)), hashType(UINT64_C(0x35CAB62109DD038A)),
			hashType(UINT64_C(0xA90B24499FCFAFB1)), hashType(UINT64_C(0x77A225A07CC2C6BD)), hashType(UINT64_C(0x513E5E634C70E331)), hashType(UINT64_C(0x4361C0CA3F692F12)),
			hashType(UINT64_C(0xD941ACA44B20A45B)), hashType(UINT64_C(0x528F7C8602C5807B)), hashType(UINT64_C(0x52AB92BEB9613989)), hashType(UINT64_C(0x9D1DFA2EFC557F73)),
			hashType(UINT64_C(0x722FF175F572C348)), hashType(UINT64_C(0x1D1260A51107FE97)), hashType(UINT64_C(0x7A249A57EC0C9BA2)), hashType(UINT64_C(0x04208FE9E8F7F2D6)),
			hashType(UINT64_C(0x5A110C6058B920A0)), hashType(UINT64_C(0x0CD9A497658A5698)), hashType(UINT64_C(0x56FD23C8F9715A4C)), hashType(UINT64_C(0x284C847B9D887AAE)),
			hashType(UINT64_C(0x04FEABFBBDB619CB)), hashType(UINT64_C(0x742E1E651C60BA83)), hashType(UINT64_C(0x9A9632E65904AD3C)), hashType(UINT64_C(0x881B82A13B51B9E2)),
			hashType(UINT64_C(0x506E6744CD974924)), hashType(UINT64_C(0xB0183DB56FFC6A79)), hashType(UINT64_C(0x0ED9B915C66ED37E)), hashType(UINT64_C(0x5E11E86D5873D484)),
			hashType(UINT64_C(0xF678647E3519AC6E)), hashType(UINT64_C(0x1B85D488D0F20CC5)), hashType(UINT64_C(0xDAB9FE6525D89021)), hashType(UINT64_C(0x0D151D86ADB73615)),
			hashType(UINT64_C(0xA865A54EDCC0F019)), hashType(UINT64_C(0x93C42566AEF98FFB)), hashType(UINT64_C(0x99E7AFEABE000731)), hashType(UINT64_C(0x48CBFF086DDF285A)),
			hashType(UINT64_C(0x7F9B6AF1EBF78BAF)), hashType(UINT64_C(0x58627E1A149BBA21)), hashType(UINT64_C(0x2CD16E2ABD791E33)), hashType(UINT64_C(0xD363EFF5F0977996)),
			hashType(UINT64_C(0x0CE2A38C344A6EED)), hashType(UINT64_C(0x1A804AADB9CFA741)), hashType(UINT64_C(0x907F30421D78C5DE)), hashType(UINT64_C(0x501F65EDB3034D07)),
			hashType(UINT64_C(0x37624AE5A48FA6E9)), hashType(UINT64_C(0x957BAF61700CFF4E)), hashType(UINT64_C(0x3A6C27934E31188A)), hashType(UINT64_C(0xD49503536ABCA345)),
			hashType(UINT64_C(0x088E049589C432E0)), hashType(UINT64_C(0xF943AEE7FEBF21B8)), hashType(UINT64_C(0x6C3B8E3E336139D3)), hashType(UINT64_C(0x364F6FFA464EE52E)),
			hashType(UINT64_C(0xD60F6DCEDC314222)), hashType(UINT64_C(0x56963B0DCA418FC0)), hashType(UINT64_C(0x16F50EDF91E513AF)), hashType(UINT64_C(0xEF1955914B609F93)),
			hashType(UINT64_C(0x565601C0364E3228)), hashType(UINT64_C(0xECB53939887E8175)), hashType(UINT64_C(0xBAC7A9A18531294B)), hashType(UINT64_C(0xB344C470397BBA52)),
			hashType(UINT64_C(0x65D34954DAF3CEBD)), hashType(UINT64_C(0xB4B81B3FA97511E2)), hashType(UINT64_C(0xB422061193D6F6A7)), hashType(UINT64_C(0x071582401C38434D)),
			hashType(UINT64_C(0x7A13F18BBEDC4FF5)), hashType(UINT64_C(0xBC4097B116C524D2)), hashType(UINT64_C(0x59B97885E2F2EA28)), hashType(UINT64_C(0x99170A5DC3115544)),
			hashType(UINT64_C(0x6F423357E7C6A9F9)), hashType(UINT64_C(0x325928EE6E6F8794)), hashType(UINT64_C(0xD0E4366228B03343)), hashType(UINT64_C(0x565C31F7DE89EA27)),
			hashType(UINT64_C(0x30F5611484119414)), hashType(UINT64_C(0xD873DB391292ED4F)), hashType(UINT64_C(0x7BD94E1D8E17DEBC)), hashType(UINT64_C(0xC7D9F16864A76E94)),
			hashType(UINT64_C(0x947AE053EE56E63C)), hashType(UINT64_C(0xC8C93882F9475F5F)), hashType(UINT64_C(0x3A9BF55BA91F81CA)), hashType(UINT64_C(0xD9A11FBB3D9808E4)),
			hashType(UINT64_C(0x0FD22063EDC29FCA)), hashType(UINT64_C(0xB3F256D8ACA0B0B9)), hashType(UINT64_C(0xB03031A8B4516E84)), hashType(UINT64_C(0x35DD37D5871448AF)),
			hashType(UINT64_C(0xE9F6082B05542E4E)), hashType(UINT64_C(0xEBFAFA33D7254B59)), hashType(UINT64_C(0x9255ABB50D532280)), hashType(UINT64_C(0xB9AB4CE57F2D34F3)),
			hashType(UINT64_C(0x693501D628297551)), hashType(UINT64_C(0xC62C58F97DD949BF)), hashType(UINT64_C(0xCD454F8F19C5126A)), hashType(UINT64_C(0xBBE83F4ECC2BDECB)),
			hashType(UINT64_C(0xDC842B7E2819E230)), hashType(UINT64_C(0xBA89142E007503B8)), hashType(UINT64_C(0xA3BC941D0A5061CB)), hashType(UINT64_C(0xE9F6760E32CD8021)),
			hashType(UINT64_C(0x09C7E552BC76492F)), hashType(UINT64_C(0x852F54934DA55CC9)), hashType(UINT64_C(0x8107FCCF064FCF56)), hashType(UINT64_C(0x098954D51FFF6580)),
			hashType(UINT64_C(0x23B70EDB1955C4BF)), hashType(UINT64_C(0xC330DE426430F69D)), hashType(UINT64_C(0x4715ED43E8A45C0A)), hashType(UINT64_C(0xA8D7E4DAB780A08D)),
			hashType(UINT64_C(0x0572B974F03CE0BB)), hashType(UINT64_C(0xB57D2E985E1419C7)), hashType(UINT64_C(0xE8D9ECBE2CF3D73F)), hashType(UINT64_C(0x2FE4B17170E59750)),
			hashType(UINT64_C(0x11317BA87905E790)), hashType(UINT64_C(0x7FBF21EC8A1F45EC)), hashType(UINT64_C(0x1725CABFCB045B00)), hashType(UINT64_C(0x964E915CD5E2B207)),
			hashType(UINT64_C(0x3E2B8BCBF016D66D)), hashType(UINT64_C(0xBE7444E39328A0AC)), hashType(UINT64_C(0xF85B2B4FBCDE44B7)), hashType(UINT64_C(0x49353FEA39BA63B1)),
			hashType(UINT64_C(0x1DD01AAFCD53486A)), hashType(UINT64_C(0x1FCA8A92FD719F85)), hashType(UINT64_C(0xFC7C95D827357AFA)), hashType(UINT64_C(0x18A6A990C8B35EBD)),
			hashType(UINT64_C(0xCCCB7005C6B9C28D)), hashType(UINT64_C(0x3BDBB92C43B17F26)), hashType(UINT64_C(0xAA70B5B4F89695A2)), hashType(UINT64_C(0xE94C39A54A98307F)),
			hashType(UINT64_C(0xB7A0B174CFF6F36E)), hashType(UINT64_C(0xD4DBA84729AF48AD)), hashType(UINT64_C(0x2E18BC1AD9704A68)), hashType(UINT64_C(0x2DE0966DAF2F8B1C)),
			hashType(UINT64_C(0xB9C11D5B1E43A07E)), hashType(UINT64_C(0x64972D68DEE33360)), hashType(UINT64_C(0x94628D38D0C20584)), hashType(UINT64_C(0xDBC0D2B6AB90A559)),
			hashType(UINT64_C(0xD2733C4335C6A72F)), hashType(UINT64_C(0x7E75D99D94A70F4D)), hashType(UINT64_C(0x6CED1983376FA72B)), hashType(UINT64_C(0x97FCAACBF030BC24)),
			hashType(UINT64_C(0x7B77497B32503B12)), hashType(UINT64_C(0x8547EDDFB81CCB94)), hashType(UINT64_C(0x79999CDFF70902CB)), hashType(UINT64_C(0xCFFE1939438E9B24)),
			hashType(UINT64_C(0x829626E3892D95D7)), hashType(UINT64_C(0x92FAE24291F2B3F1)), hashType(UINT64_C(0x63E22C147B9C3403)), hashType(UINT64_C(0xC678B6D860284A1C)),
			hashType(UINT64_C(0x5873888850659AE7)), hashType(UINT64_C(0x0981DCD296A8736D)), hashType(UINT64_C(0x9F65789A6509A440)), hashType(UINT64_C(0x9FF38FED72E9052F)),
			hashType(UINT64_C(0xE479EE5B9930578C)), hashType(UINT64_C(0xE7F28ECD2D49EECD)), hashType(UINT64_C(0x56C074A581EA17FE)), hashType(UINT64_C(0x5544F7D774B14AEF)),
			hashType(UINT64_C(0x7B3F0195FC6F290F)), hashType(UINT64_C(0x12153635B2C0CF57)), hashType(UINT64_C(0x7F5126DBBA5E0CA7)), hashType(UINT64_C(0x7A76956C3EAFB413)),
			hashType(UINT64_C(0x3D5774A11D31AB39)), hashType(UINT64_C(0x8A1B083821F40CB4)), hashType(UINT64_C(0x7B4A38E32537DF62)), hashType(UINT64_C(0x950113646D1D6E03)),
			hashType(UINT64_C(0x4DA8979A0041E8A9)), hashType(UINT64_C(0x3BC36E078F7515D7)), hashType(UINT64_C(0x5D0A12F27AD310D1)), hashType(UINT64_C(0x7F9D1A2E1EBE1327)),
			hashType(UINT64_C(0xDA3A361B1C5157B1)), hashType(UINT64_C(0xDCDD7D20903D0C25)), hashType(UINT64_C(0x36833336D068F707)), hashType(UINT64_C(0xCE68341F79893389)),
			hashType(UINT64_C(0xAB9090168DD05F34)), hashType(UINT64_C(0x43954B3252DC25E5)), hashType(UINT64_C(0xB438C2B67F98E5E9)), hashType(UINT64_C(0x10DCD78E3851A492)),
			hashType(UINT64_C(0xDBC27AB5447822BF)), hashType(UINT64_C(0x9B3CDB65F82CA382)), hashType(UINT64_C(0xB67B7896167B4C84)), hashType(UINT64_C(0xBFCED1B0048EAC50)),
			hashType(UINT64_C(0xA9119B60369FFEBD)), hashType(UINT64_C(0x1FFF7AC80904BF45)), hashType(UINT64_C(0xAC12FB171817EEE7)), hashType(UINT64_C(0xAF08DA9177DDA93D)),
			hashType(UINT64_C(0x1B0CAB936E65C744)), hashType(UINT64_C(0xB559EB1D04E5E932)), hashType(UINT64_C(0xC37B45B3F8D6F2BA)), hashType(UINT64_C(0xC3A9DC228CAAC9E9)),
			hashType(UINT64_C(0xF3B8B6675A6507FF)), hashType(UINT64_C(0x9FC477DE4ED681DA)), hashType(UINT64_C(0x67378D8ECCEF96CB)), hashType(UINT64_C(0x6DD856D94D259236)),
			hashType(UINT64_C(0xA319CE15B0B4DB31)), hashType(UINT64_C(0x073973751F12DD5E)), hashType(UINT64_C(0x8A8E849EB32781A5)), hashType(UINT64_C(0xE1925C71285279F5)),
			hashType(UINT64_C(0x74C04BF1790C0EFE)), hashType(UINT64_C(0x4DDA48153C94938A)), hashType(UINT64_C(0x9D266D6A1CC0542C)), hashType(UINT64_C(0x7440FB816508C4FE)),
			hashType(UINT64_C(0x13328503DF48229F)), hashType(UINT64_C(0xD6BF7BAEE43CAC40)), hashType(UINT64_C(0x4838D65F6EF6748F)), hashType(UINT64_C(0x1E152328F3318DEA)),
			hashType(UINT64_C(0x8F8419A348F296BF)), hashType(UINT64_C(0x72C8834A5957B511)), hashType(UINT64_C(0xD7A023A73260B45C)), hashType(UINT64_C(0x94EBC8ABCFB56DAE)),
			hashType(UINT64_C(0x9FC10D0F989993E0)), hashType(UINT64_C(0xDE68A2355B93CAE6)), hashType(UINT64_C(0xA44CFE79AE538BBE)), hashType(UINT64_C(0x9D1D84FCCE371425)),
			hashType(UINT64_C(0x51D2B1AB2DDFB636)), hashType(UINT64_C(0x2FD7E4B9E72CD38C)), hashType(UINT64_C(0x65CA5B96B7552210)), hashType(UINT64_C(0xDD69A0D8AB3B546D)),
			hashType(UINT64_C(0x604D51B25FBF70E2)), hashType(UINT64_C(0x73AA8A564FB7AC9E)), hashType(UINT64_C(0x1A8C1E992B941148)), hashType(UINT64_C(0xAAC40A2703D9BEA0)),
			hashType(UINT64_C(0x764DBEAE7FA4F3A6)), hashType(UINT64_C(0x1E99B96E70A9BE8B)), hashType(UINT64_C(0x2C5E9DEB57EF4743)), hashType(UINT64_C(0x3A938FEE32D29981)),
			hashType(UINT64_C(0x26E6DB8FFDF5ADFE)), hashType(UINT64_C(0x469356C504EC9F9D)), hashType(UINT64_C(0xC8763C5B08D1908C)), hashType(UINT64_C(0x3F6C6AF859D80055)),
			hashType(UINT64_C(0x7F7CC39420A3A545)), hashType(UINT64_C(0x9BFB227EBDF4C5CE)), hashType(UINT64_C(0x89039D79D6FC5C5C)), hashType(UINT64_C(0x8FE88B57305E2AB6)),
			hashType(UINT64_C(0xA09E8C8C35AB96DE)), hashType(UINT64_C(0xFA7E393983325753)), hashType(UINT64_C(0xD6B6D0ECC617C699)), hashType(UINT64_C(0xDFEA21EA9E7557E3)),
			hashType(UINT64_C(0xB67C1FA481680AF8)), hashType(UINT64_C(0xCA1E3785A9E724E5)), hashType(UINT64_C(0x1CFC8BED0D681639)), hashType(UINT64_C(0xD18D8549D140CAEA)),
			hashType(UINT64_C(0x4ED0FE7E9DC91335)), hashType(UINT64_C(0xE4DBF0634473F5D2)), hashType(UINT64_C(0x1761F93A44D5AEFE)), hashType(UINT64_C(0x53898E4C3910DA55)),
			hashType(UINT64_C(0x734DE8181F6EC39A)), hashType(UINT64_C(0x2680B122BAA28D97)), hashType(UINT64_C(0x298AF231C85BAFAB)), hashType(UINT64_C(0x7983EED3740847D5)),
			hashType(UINT64_C(0x66C1A2A1A60CD889)), hashType(UINT64_C(0x9E17E49642A3E4C1)), hashType(UINT64_C(0xEDB454E7BADC0805)), hashType(UINT64_C(0x50B704CAB602C329)),
			hashType(UINT64_C(0x4CC317FB9CDDD023)), hashType(UINT64_C(0x66B4835D9EAFEA22)), hashType(UINT64_C(0x219B97E26FFC81BD)), hashType(UINT64_C(0x261E4E4C0A333A9D)),
			hashType(UINT64_C(0x1FE2CCA76517DB90)), hashType(UINT64_C(0xD7504DFA8816EDBB)), hashType(UINT64_C(0xB9571FA04DC089C8)), hashType(UINT64_C(0x1DDC0325259B27DE)),
			hashType(UINT64_C(0xCF3F4688801EB9AA)), hashType(UINT64_C(0xF4F5D05C10CAB243)), hashType(UINT64_C(0x38B6525C21A42B0E)), hashType(UINT64_C(0x36F60E2BA4FA6800)),
			hashType(UINT64_C(0xEB3593803173E0CE)), hashType(UINT64_C(0x9C4CD6257C5A3603)), hashType(UINT64_C(0xAF0C317D32ADAA8A)), hashType(UINT64_C(0x258E5A80C7204C4B)),
			hashType(UINT64_C(0x8B889D624D44885D)), hashType(UINT64_C(0xF4D14597E660F855)), hashType(UINT64_C(0xD4347F66EC8941C3)), hashType(UINT64_C(0xE699ED85B0DFB40D)),
			hashType(UINT64_C(0x2472F6207C2D0484)), hashType(UINT64_C(0xC2A1E7B5B459AEB5)), hashType(UINT64_C(0xAB4F6451CC1D45EC)), hashType(UINT64_C(0x63767572AE3D6174)),
			hashType(UINT64_C(0xA59E0BD101731A28)), hashType(UINT64_C(0x116D0016CB948F09)), hashType(UINT64_C(0x2CF9C8CA052F6E9F)), hashType(UINT64_C(0x0B090A7560A968E3)),
			hashType(UINT64_C(0xABEEDDB2DDE06FF1)), hashType(UINT64_C(0x58EFC10B06A2068D)), hashType(UINT64_C(0xC6E57A78FBD986E0)), hashType(UINT64_C(0x2EAB8CA63CE802D7)),
			hashType(UINT64_C(0x14A195640116F336)), hashType(UINT64_C(0x7C0828DD624EC390)), hashType(UINT64_C(0xD74BBE77E6116AC7)), hashType(UINT64_C(0x804456AF10F5FB53)),
			hashType(UINT64_C(0xEBE9EA2ADF4321C7)), hashType(UINT64_C(0x03219A39EE587A30)), hashType(UINT64_C(0x49787FEF17AF9924)), hashType(UINT64_C(0xA1E9300CD8520548)),
			hashType(UINT64_C(0x5B45E522E4B1B4EF)), hashType(UINT64_C(0xB49C3B3995091A36)), hashType(UINT64_C(0xD4490AD526F14431)), hashType(UINT64_C(0x12A8F216AF9418C2)),
			hashType(UINT64_C(0x001F837CC7350524)), hashType(UINT64_C(0x1877B51E57A764D5)), hashType(UINT64_C(0xA2853B80F17F58EE)), hashType(UINT64_C(0x993E1DE72D36D310)),
			hashType(UINT64_C(0xB3598080CE64A656)), hashType(UINT64_C(0x252F59CF0D9F04BB)), hashType(UINT64_C(0xD23C8E176D113600)), hashType(UINT64_C(0x1BDA0492E7E4586E)),
			hashType(UINT64_C(0x21E0BD5026C619BF)), hashType(UINT64_C(0x3B097ADAF088F94E)), hashType(UINT64_C(0x8D14DEDB30BE846E)), hashType(UINT64_C(0xF95CFFA23AF5F6F4)),
			hashType(UINT64_C(0x3871700761B3F743)), hashType(UINT64_C(0xCA672B91E9E4FA16)), hashType(UINT64_C(0x64C8E531BFF53B55)), hashType(UINT64_C(0x241260ED4AD1E87D)),
			hashType(UINT64_C(0x106C09B972D2E822)), hashType(UINT64_C(0x7FBA195410E5CA30)), hashType(UINT64_C(0x7884D9BC6CB569D8)), hashType(UINT64_C(0x0647DFEDCD894A29)),
			hashType(UINT64_C(0x63573FF03E224774)), hashType(UINT64_C(0x4FC8E9560F91B123)), hashType(UINT64_C(0x1DB956E450275779)), hashType(UINT64_C(0xB8D91274B9E9D4FB)),
			hashType(UINT64_C(0xA2EBEE47E2FBFCE1)), hashType(UINT64_C(0xD9F1F30CCD97FB09)), hashType(UINT64_C(0xEFED53D75FD64E6B)), hashType(UINT64_C(0x2E6D02C36017F67F)),
			hashType(UINT64_C(0xA9AA4D20DB084E9B)), hashType(UINT64_C(0xB64BE8D8B25396C1)), hashType(UINT64_C(0x70CB6AF7C2D5BCF0)), hashType(UINT64_C(0x98F076A4F7A2322E)),
			hashType(UINT64_C(0xBF84470805E69B5F)), hashType(UINT64_C(0x94C3251F06F90CF3)), hashType(UINT64_C(0x3E003E616A6591E9)), hashType(UINT64_C(0xB925A6CD0421AFF3)),
			hashType(UINT64_C(0x61BDD1307C66E300)), hashType(UINT64_C(0xBF8D5108E27E0D48)), hashType(UINT64_C(0x240AB57A8B888B20)), hashType(UINT64_C(0xFC87614BAF287E07)),
			hashType(UINT64_C(0xEF02CDD06FFDB432)), hashType(UINT64_C(0xA1082C0466DF6C0A)), hashType(UINT64_C(0x8215E577001332C8)), hashType(UINT64_C(0xD39BB9C3A48DB6CF)),
			hashType(UINT64_C(0x2738259634305C14)), hashType(UINT64_C(0x61CF4F94C97DF93D)), hashType(UINT64_C(0x1B6BACA2AE4E125B)), hashType(UINT64_C(0x758F450C88572E0B)),
			hashType(UINT64_C(0x959F587D507A8359)), hashType(UINT64_C(0xB063E962E045F54D)), hashType(UINT64_C(0x60E8ED72C0DFF5D1)), hashType(UINT64_C(0x7B64978555326F9F)),
			hashType(UINT64_C(0xFD080D236DA814BA)), hashType(UINT64_C(0x8C90FD9B083F4558)), hashType(UINT64_C(0x106F72FE81E2C590)), hashType(UINT64_C(0x7976033A39F7D952)),
			hashType(UINT64_C(0xA4EC0132764CA04B)), hashType(UINT64_C(0x733EA705FAE4FA77)), hashType(UINT64_C(0xB4D8F77BC3E56167)), hashType(UINT64_C(0x9E21F4F903B33FD9)),
			hashType(UINT64_C(0x9D765E419FB69F6D)), hashType(UINT64_C(0xD30C088BA61EA5EF)), hashType(UINT64_C(0x5D94337FBFAF7F5B)), hashType(UINT64_C(0x1A4E4822EB4D7A59)),
			hashType(UINT64_C(0x6FFE73E81B637FB3)), hashType(UINT64_C(0xDDF957BC36D8B9CA)), hashType(UINT64_C(0x64D0E29EEA8838B3)), hashType(UINT64_C(0x08DD9BDFD96B9F63)),
			hashType(UINT64_C(0x087E79E5A57D1D13)), hashType(UINT64_C(0xE328E230E3E2B3FB)), hashType(UINT64_C(0x1C2559E30F0946BE)), hashType(UINT64_C(0x720BF5F26F4D2EAA)),
			hashType(UINT64_C(0xB0774D261CC609DB)), hashType(UINT64_C(0x443F64EC5A371195)), hashType(UINT64_C(0x4112CF68649A260E)), hashType(UINT64_C(0xD813F2FAB7F5C5CA)),
			hashType(UINT64_C(0x660D3257380841EE)), hashType(UINT64_C(0x59AC2C7873F910A3)), hashType(UINT64_C(0xE846963877671A17)), hashType(UINT64_C(0x93B633ABFA3469F8)),
			hashType(UINT64_C(0xC0C0F5A60EF4CDCF)), hashType(UINT64_C(0xCAF21ECD4377B28C)), hashType(UINT64_C(0x57277707199B8175)), hashType(UINT64_C(0x506C11B9D90E8B1D)),
			hashType(UINT64_C(0xD83CC2687A19255F)), hashType(UINT64_C(0x4A29C6465A314CD1)), hashType(UINT64_C(0xED2DF21216235097)), hashType(UINT64_C(0xB5635C95FF7296E2)),
			hashType(UINT64_C(0x22AF003AB672E811)), hashType(UINT64_C(0x52E762596BF68235)), hashType(UINT64_C(0x9AEBA33AC6ECC6B0)), hashType(UINT64_C(0x944F6DE09134DFB6)),
			hashType(UINT64_C(0x6C47BEC883A7DE39)), hashType(UINT64_C(0x6AD047C430A12104)), hashType(UINT64_C(0xA5B1CFDBA0AB4067)), hashType(UINT64_C(0x7C45D833AFF07862)),
			hashType(UINT64_C(0x5092EF950A16DA0B)), hashType(UINT64_C(0x9338E69C052B8E7B)), hashType(UINT64_C(0x455A4B4CFE30E3F5)), hashType(UINT64_C(0x6B02E63195AD0CF8)),
			hashType(UINT64_C(0x6B17B224BAD6BF27)), hashType(UINT64_C(0xD1E0CCD25BB9C169)), hashType(UINT64_C(0xDE0C89A556B9AE70)), hashType(UINT64_C(0x50065E535A213CF6)),
			hashType(UINT64_C(0x9C1169FA2777B874)), hashType(UINT64_C(0x78EDEFD694AF1EED)), hashType(UINT64_C(0x6DC93D9526A50E68)), hashType(UINT64_C(0xEE97F453F06791ED)),
			hashType(UINT64_C(0x32AB0EDB696703D3)), hashType(UINT64_C(0x3A6853C7E70757A7)), hashType(UINT64_C(0x31865CED6120F37D)), hashType(UINT64_C(0x67FEF95D92607890)),
			hashType(UINT64_C(0x1F2B1D1F15F6DC9C)), hashType(UINT64_C(0xB69E38A8965C6B65)), hashType(UINT64_C(0xAA9119FF184CCCF4)), hashType(UINT64_C(0xF43C732873F24C13)),
			hashType(UINT64_C(0xFB4A3D794A9A80D2)), hashType(UINT64_C(0x3550C2321FD6109C)), hashType(UINT64_C(0x371F77E76BB8417E)), hashType(UINT64_C(0x6BFA9AAE5EC05779)),
			hashType(UINT64_C(0xCD04F3FF001A4778)), hashType(UINT64_C(0xE3273522064480CA)), hashType(UINT64_C(0x9F91508BFFCFC14A)), hashType(UINT64_C(0x049A7F41061A9E60)),
			hashType(UINT64_C(0xFCB6BE43A9F2FE9B)), hashType(UINT64_C(0x08DE8A1C7797DA9B)), hashType(UINT64_C(0x8F9887E6078735A1)), hashType(UINT64_C(0xB5B4071DBFC73A66)),
			hashType(UINT64_C(0x230E343DFBA08D33)), hashType(UINT64_C(0x43ED7F5A0FAE657D)), hashType(UINT64_C(0x3A88A0FBBCB05C63)), hashType(UINT64_C(0x21874B8B4D2DBC4F)),
			hashType(UINT64_C(0x1BDEA12E35F6A8C9)), hashType(UINT64_C(0x53C065C6C8E63528)), hashType(UINT64_C(0xE34A1D250E7A8D6B)), hashType(UINT64_C(0xD6B04D3B7651DD7E)),
			hashType(UINT64_C(0x5E90277E7CB39E2D)), hashType(UINT64_C(0x2C046F22062DC67D)), hashType(UINT64_C(0xB10BB459132D0A26)), hashType(UINT64_C(0x3FA9DDFB67E2F199)),
			hashType(UINT64_C(0x0E09B88E1914F7AF)), hashType(UINT64_C(0x10E8B35AF3EEAB37)), hashType(UINT64_C(0x9EEDECA8E272B933)), hashType(UINT64_C(0xD4C718BC4AE8AE5F)),
			hashType(UINT64_C(0x81536D601170FC20)), hashType(UINT64_C(0x91B534F885818A06)), hashType(UINT64_C(0xEC8177F83F900978)), hashType(UINT64_C(0x190E714FADA5156E)),
			hashType(UINT64_C(0xB592BF39B0364963)), hashType(UINT64_C(0x89C350C893AE7DC1)), hashType(UINT64_C(0xAC042E70F8B383F2)), hashType(UINT64_C(0xB49B52E587A1EE60)),
			hashType(UINT64_C(0xFB152FE3FF26DA89)), hashType(UINT64_C(0x3E666E6F69AE2C15)), hashType(UINT64_C(0x3B544EBE544C19F9)), hashType(UINT64_C(0xE805A1E290CF2456)),
			hashType(UINT64_C(0x24B33C9D7ED25117)), hashType(UINT64_C(0xE74733427B72F0C1)), hashType(UINT64_C(0x0A804D18B7097475)), hashType(UINT64_C(0x57E3306D881EDB4F)),
			hashType(UINT64_C(0x4AE7D6A36EB5DBCB)), hashType(UINT64_C(0x2D8D5432157064C8)), hashType(UINT64_C(0xD1E649DE1E7F268B)), hashType(UINT64_C(0x8A328A1CEDFE552C)),
			hashType(UINT64_C(0x07A3AEC79624C7DA)), hashType(UINT64_C(0x84547DDC3E203C94)), hashType(UINT64_C(0x990A98FD5071D263)), hashType(UINT64_C(0x1A4FF12616EEFC89)),
			hashType(UINT64_C(0xF6F7FD1431714200)), hashType(UINT64_C(0x30C05B1BA332F41C)), hashType(UINT64_C(0x8D2636B81555A786)), hashType(UINT64_C(0x46C9FEB55D120902)),
			hashType(UINT64_C(0xCCEC0A73B49C9921)), hashType(UINT64_C(0x4E9D2827355FC492)), hashType(UINT64_C(0x19EBB029435DCB0F)), hashType(UINT64_C(0x4659D2B743848A2C)),
			hashType(UINT64_C(0x963EF2C96B33BE31)), hashType(UINT64_C(0x74F85198B05A2E7D)), hashType(UINT64_C(0x5A0F544DD2B1FB18)), hashType(UINT64_C(0x03727073C2E134B1)),
			hashType(UINT64_C(0xC7F6AA2DE59AEA61)), hashType(UINT64_C(0x352787BAA0D7C22F)), hashType(UINT64_C(0x9853EAB63B5E0B35)), hashType(UINT64_C(0xABBDCDD7ED5C0860)),
			hashType(UINT64_C(0xCF05DAF5AC8D77B0)), hashType(UINT64_C(0x49CAD48CEBF4A71E)), hashType(UINT64_C(0x7A4C10EC2158C4A6)), hashType(UINT64_C(0xD9E92AA246BF719E)),
			hashType(UINT64_C(0x13AE978D09FE5557)), hashType(UINT64_C(0x730499AF921549FF)), hashType(UINT64_C(0x4E4B705B92903BA4)), hashType(UINT64_C(0xFF577222C14F0A3A)),
			hashType(UINT64_C(0x55B6344CF97AAFAE)), hashType(UINT64_C(0xB862225B055B6960)), hashType(UINT64_C(0xCAC09AFBDDD2CDB4)), hashType(UINT64_C(0xDAF8E9829FE96B5F)),
			hashType(UINT64_C(0xB5FDFC5D3132C498)), hashType(UINT64_C(0x310CB380DB6F7503)), hashType(UINT64_C(0xE87FBB46217A360E)), hashType(UINT64_C(0x2102AE466EBB1148)),
			hashType(UINT64_C(0xF8549E1A3AA5E00D)), hashType(UINT64_C(0x07A69AFDCC42261A)), hashType(UINT64_C(0xC4C118BFE78FEAAE)), hashType(UINT64_C(0xF9F4892ED96BD438)),
			hashType(UINT64_C(0x1AF3DBE25D8F45DA)), hashType(UINT64_C(0xF5B4B0B0D2DEEEB4)), hashType(UINT64_C(0x962ACEEFA82E1C84)), hashType(UINT64_C(0x046E3ECAAF453CE9)),
			hashType(UINT64_C(0xF05D129681949A4C)), hashType(UINT64_C(0x964781CE734B3C84)), hashType(UINT64_C(0x9C2ED44081CE5FBD)), hashType(UINT64_C(0x522E23F3925E319E)),
			hashType(UINT64_C(0x177E00F9FC32F791)), hashType(UINT64_C(0x2BC60A63A6F3B3F2)), hashType(UINT64_C(0x222BBFAE61725606)), hashType(UINT64_C(0x486289DDCC3D6780)),
			hashType(UINT64_C(0x7DC7785B8EFDFC80)), hashType(UINT64_C(0x8AF38731C02BA980)), hashType(UINT64_C(0x1FAB64EA29A2DDF7)), hashType(UINT64_C(0xE4D9429322CD065A)),
			hashType(UINT64_C(0x9DA058C67844F20C)), hashType(UINT64_C(0x24C0E332B70019B0)), hashType(UINT64_C(0x233003B5A6CFE6AD)), hashType(UINT64_C(0xD586BD01C5C217F6)),
			hashType(UINT64_C(0x5E5637885F29BC2B)), hashType(UINT64_C(0x7EBA726D8C94094B)), hashType(UINT64_C(0x0A56A5F0BFE39272)), hashType(UINT64_C(0xD79476A84EE20D06)),
			hashType(UINT64_C(0x9E4C1269BAA4BF37)), hashType(UINT64_C(0x17EFEE45B0DEE640)), hashType(UINT64_C(0x1D95B0A5FCF90BC6)), hashType(UINT64_C(0x93CBE0B699C2585D)),
			hashType(UINT64_C(0x65FA4F227A2B6D79)), hashType(UINT64_C(0xD5F9E858292504D5)), hashType(UINT64_C(0xC2B5A03F71471A6F)), hashType(UINT64_C(0x59300222B4561E00)),
			hashType(UINT64_C(0xCE2F8642CA0712DC)), hashType(UINT64_C(0x7CA9723FBB2E8988)), hashType(UINT64_C(0x2785338347F2BA08)), hashType(UINT64_C(0xC61BB3A141E50E8C)),
			hashType(UINT64_C(0x150F361DAB9DEC26)), hashType(UINT64_C(0x9F6A419D382595F4)), hashType(UINT64_C(0x64A53DC924FE7AC9)), hashType(UINT64_C(0x142DE49FFF7A7C3D)),
			hashType(UINT64_C(0x0C335248857FA9E7)), hashType(UINT64_C(0x0A9C32D5EAE45305)), hashType(UINT64_C(0xE6C42178C4BBB92E)), hashType(UINT64_C(0x71F1CE2490D20B07)),
			hashType(UINT64_C(0xF1BCC3D275AFE51A)), hashType(UINT64_C(0xE728E8C83C334074)), hashType(UINT64_C(0x96FBF83A12884624)), hashType(UINT64_C(0x81A1549FD6573DA5)),
			hashType(UINT64_C(0x5FA7867CAF35E149)), hashType(UINT64_C(0x56986E2EF3ED091B)), hashType(UINT64_C(0x917F1DD5F8886C61)), hashType(UINT64_C(0xD20D8C88C8FFE65F))
		};
		constexpr static inline hashType m_CastleHash[4]
		{
			hashType(UINT64_C(0x31D71DCE64B2C310)),
			hashType(UINT64_C(0xF165B587DF898190)),
			hashType(UINT64_C(0xA57E6339DD2CF3A0)),
			hashType(UINT64_C(0x1EF6E6DBB1961EC9))
		};
		constexpr static inline hashType m_EpHash[8]
		{
			hashType(UINT64_C(0x70CC73D90BC26E24)),
			hashType(UINT64_C(0xE21A6B35DF0C3AD7)),
			hashType(UINT64_C(0x003A93D8B2806962)),
			hashType(UINT64_C(0x1C99DED33CB890A1)),
			hashType(UINT64_C(0xCF3145DE0ADD4289)),
			hashType(UINT64_C(0xD0E4427A5514FB72)),
			hashType(UINT64_C(0x77C621CC9FB3A483)),
			hashType(UINT64_C(0x67A34DAC4356550B))
		};
		constexpr static inline hashType m_PlayerHash[2]
		{
			hashType(UINT64_C(0xF8D626AAAF278509)),
			hashType(UINT64_C(0x0000000000000000))
		};
		constexpr static inline std::array<std::array<std::array<hashType, countSquares>, countPieces>, countPlayers> m_PlayerPieceSquareHash
		{
			arrayhelper::generate<countPlayers, std::array<std::array<hashType, countSquares>, countPieces>>([](const size_t player) { return arrayhelper::generate<countPieces, std::array<hashType, countSquares>>([player](const size_t piece) {return arrayhelper::generate<countSquares, hashType>([player, piece](const size_t square) 
				{
					constexpr const size_t piecePlayerIndex[2][8]
					{
						{
							3,
							5,
							7,
							9,
							1,
							11,
						},
						{
							2,
							4,
							6,
							8,
							9,
							10,
						}
					};
					const squareType square_t{ static_cast<squareType>(square) };
					const rankType rank{ square_t.rank() };
					const fileType file{ square_t.file() };
					const size_t kind_of_piece{ piecePlayerIndex[player][piece] };
					const size_t offset_piece{ static_cast<size_t>(64 * kind_of_piece + 8 * static_cast<size_t>(static_cast<rankType::baseType>(rank)) + static_cast<size_t>(static_cast<fileType::baseType>(file))) };
					return m_PieceHash[offset_piece];
				}); }); })
		};
		constexpr static inline std::array<hashType, 1 << countFlags> m_FlagsHash
		{
			arrayhelper::generate<1 << countFlags,hashType>([](const size_t index)
				{
					const flagsType flags{static_cast<flagsType>(static_cast<typename flagsType::bitsType>(index))};
					const auto castleFlags{ flags.bits().extractBits<0,4>() };
					const auto epFlags{ flags.bits().extractBits<4,8>() };
					const size_t castleFlagsIndex{ static_cast<size_t>(static_cast<std::uint64_t>(castleFlags)) };
					const size_t epFlagsIndex{ static_cast<size_t>(static_cast<std::uint64_t>(epFlags)) };
					hashType hash{ hashType(0) };
					for (size_t i = 0; i < 4; i++)
					{
						if (castleFlags[i])
							hash ^= m_CastleHash[i];
					}
					for (size_t i = 0; i < 8; i++)
					{
						if (epFlags[i])
							hash ^= m_EpHash[i];
					}
					return hash;
				})
		};
	public:
		board() noexcept
		{
		}
		PYGMALION_INLINE static const hashType& customPlayerHash(const playerType player) noexcept
		{
			return m_PlayerHash[player];
		}
		PYGMALION_INLINE static const hashType& customFlagsHash(const flagsType flags) noexcept
		{
			const size_t index{ static_cast<size_t>(static_cast<std::uintmax_t>(flags.bits())) };
			return m_FlagsHash[index];
		}
		PYGMALION_INLINE static const hashType& customPieceHash(const pieceType piece, const squareType square, const playerType player) noexcept
		{
			return m_PlayerPieceSquareHash[player][piece][square];
		}
		PYGMALION_TUNABLE PYGMALION_INLINE static materialScore materialValueAbsolute(const pieceType pc, const squareType sq, const playerType pl) noexcept
		{
			return m_Material.absoluteMaterial(pl, pc, sq);
		}
		PYGMALION_TUNABLE PYGMALION_INLINE static materialScore materialValueRelative(const pieceType pc, const squareType sq, const playerType pl) noexcept
		{
			return m_Material.relativeMaterial(pl, pc, sq);
		}
		PYGMALION_TUNABLE PYGMALION_INLINE static materialScore materialUpperBound(const pieceType pc) noexcept
		{
			return m_Material.materialUpperBound(pc);
		}
		PYGMALION_TUNABLE PYGMALION_INLINE static materialScore materialLowerBound(const pieceType pc) noexcept
		{
			return m_Material.materialLowerBound(pc);
		}
		PYGMALION_INLINE PYGMALION_TUNABLE static int minorPieceKnightOffset() noexcept
		{
			return m_Material.minorPieceKnightOffset();
		}
		PYGMALION_INLINE PYGMALION_TUNABLE static materialScore materialDelta() noexcept
		{
			return m_Material.materialDelta();
		}
#if defined(PYGMALION_TUNE)&&(PYGMALION_TUNE==1)
		static void setMaterial(const pieceType pc, const double score) noexcept
		{
			return m_Material.setTunedMaterial(pc, score);
		}
		static double getMaterial(const pieceType pc) noexcept
		{
			return m_Material.getTunedMaterial(pc);
		}
#endif
		PYGMALION_INLINE void clearCastleRightQueensideBlack() noexcept
		{
			clearFlag(castleRightQueensideBlack);
		}
		PYGMALION_INLINE void clearCastleRightQueensideWhite() noexcept
		{
			clearFlag(castleRightQueensideWhite);
		}
		PYGMALION_INLINE void clearCastleRightKingsideBlack() noexcept
		{
			clearFlag(castleRightKingsideBlack);
		}
		PYGMALION_INLINE void clearCastleRightKingsideWhite() noexcept
		{
			clearFlag(castleRightKingsideWhite);
		}
		PYGMALION_INLINE void setCastleRightQueensideBlack() noexcept
		{
			setFlag(castleRightQueensideBlack);
		}
		PYGMALION_INLINE void setCastleRightQueensideWhite() noexcept
		{
			setFlag(castleRightQueensideWhite);
		}
		PYGMALION_INLINE void setCastleRightKingsideBlack() noexcept
		{
			setFlag(castleRightKingsideBlack);
		}
		PYGMALION_INLINE void setCastleRightKingsideWhite() noexcept
		{
			setFlag(castleRightKingsideWhite);
		}
		PYGMALION_INLINE bool checkCastleRightQueensideBlack() const noexcept
		{
			return checkFlag(castleRightQueensideBlack);
		}
		PYGMALION_INLINE bool checkCastleRightQueensideWhite() const noexcept
		{
			return checkFlag(castleRightQueensideWhite);
		}
		PYGMALION_INLINE bool checkCastleRightKingsideBlack() const noexcept
		{
			return checkFlag(castleRightKingsideBlack);
		}
		PYGMALION_INLINE bool checkCastleRightKingsideWhite() const noexcept
		{
			return checkFlag(castleRightKingsideWhite);
		}
		PYGMALION_INLINE bool checkCastleRightQueenside(const playerType player) const noexcept
		{
			return (player == whitePlayer) ? checkCastleRightQueensideWhite() : checkCastleRightQueensideBlack();
		}
		PYGMALION_INLINE bool checkCastleRightKingside(const playerType player) const noexcept
		{
			return (player == whitePlayer) ? checkCastleRightKingsideWhite() : checkCastleRightKingsideBlack();
		}
		PYGMALION_INLINE void clearCastleRightsBlack() noexcept
		{
			clearFlags(castleFlagsBlack);
		}
		PYGMALION_INLINE void clearCastleRightsWhite() noexcept
		{
			clearFlags(castleFlagsWhite);
		}
		PYGMALION_INLINE void setEnPassantFile(const fileType file) noexcept
		{
			setFlag(enPassantFlag(file));
		}
		PYGMALION_INLINE bool getEnPassantFile(fileType& file) noexcept
		{
			const auto epFlags{ this->template extractFlagRange<4, 8>() };
			size_t epBit;
			if (epFlags.bitscanForward(epBit))
			{
				file = fileType(epBit);
				return true;
			}
			else
				return false;
		}
		PYGMALION_INLINE void clearEnPassantFile(const fileType file) noexcept
		{
			clearFlag(enPassantFlag(file));
		}
		PYGMALION_INLINE bool checkEnPassantFile(const fileType file) const noexcept
		{
			return checkFlag(enPassantFlag(file));
		}
		PYGMALION_INLINE void clearEnPassantFiles() noexcept
		{
			clearFlags(enPassantFlags);
		}
		PYGMALION_INLINE squareType kingSquare(const playerType player) const noexcept
		{
			return (pieceOccupancy(king) & playerOccupancy(player)).first();
		}
		bool setFen(const std::string& fen, std::string& error) noexcept;
		std::string getFen() const noexcept;
		PYGMALION_INLINE materialScore material() const noexcept
		{
			return cumulation().score();
		}
		// Implementation
		static std::string flagToString_Implementation(const flagType flag) noexcept;
		static bool parseFlag_Implementation(const std::string& text, flagType& flag, size_t& count) noexcept;
		static std::string rankToString_Implementation(const rankType rank) noexcept;
		static bool parseRank_Implementation(const std::string& text, rankType& rank, size_t& count) noexcept;
		static std::string fileToString_Implementation(const fileType file) noexcept;
		static bool parseFile_Implementation(const std::string& text, fileType& file, size_t& count) noexcept;
		static std::string playerToString_Implementation(const playerType player) noexcept;
		static bool parsePlayer_Implementation(const std::string& text, playerType& player, size_t& count) noexcept;
		static std::string pieceToString_Implementation(const pieceType piece, const playerType player) noexcept;
		static bool parsePiece_Implementation(const std::string& text, pieceType& piece, playerType& player, size_t& count) noexcept;
		PYGMALION_INLINE void onClear_Implementation() noexcept
		{
			cumulation().clear();
		}
		PYGMALION_INLINE void onAddedPiece_Implementation(const pieceType piece, const squareType square, const playerType player) noexcept
		{
			cumulation().score() += m_Material.absoluteMaterial(player, piece, square);
			switch (piece)
			{
			case pawn:
				cumulation().pawnHash() ^= pieceHash(pawn, square, player);
				break;
			case king:
				cumulation().pawnHash() ^= pieceHash(king, square, player);
				break;
			}
		}
		PYGMALION_INLINE void onSetMovingPlayer_Implementation(const playerType player) noexcept
		{
		}
		PYGMALION_INLINE void onRemovedPiece_Implementation(const pieceType piece, const squareType square, const playerType player) noexcept
		{
			cumulation().score() -= m_Material.absoluteMaterial(player, piece, square);
			switch (piece)
			{
			case pawn:
				cumulation().pawnHash() ^= pieceHash(pawn, square, player);
				break;
			case king:
				cumulation().pawnHash() ^= pieceHash(king, square, player);
				break;
			}
		}
		PYGMALION_INLINE void onSetFlag_Implementation(const flagType flag) noexcept
		{
		}
		PYGMALION_INLINE void onClearedFlag_Implementation(const flagType flag) noexcept
		{
		}
		void onInitialize_Implementation() noexcept;
		static std::string cumulationToString_Implementation(const cumulationType&) noexcept;
		PYGMALION_INLINE hashType pawnHash() const noexcept
		{
			return cumulation().pawnHash();
		}
		std::string getPositionString_Implementation() const noexcept
		{
			return getFen();
		}
		bool setPositionString_Implementation(const std::string& fen) noexcept
		{
			std::string error;
			return setFen(fen, error);
		}
	};

	std::ostream& operator<<(std::ostream& str, const board& position) noexcept;
}
